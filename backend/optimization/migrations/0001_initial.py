# Generated by Django 4.2.7 on 2025-09-04 01:03

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='SystemHealth',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('component', models.CharField(choices=[('DATABASE', 'Database'), ('REDIS', 'Redis Cache'), ('API', 'API Service'), ('WORKER', 'Background Worker'), ('STORAGE', 'File Storage'), ('EXTERNAL_API', 'External API')], max_length=20)),
                ('status', models.CharField(choices=[('HEALTHY', 'Healthy'), ('WARNING', 'Warning'), ('CRITICAL', 'Critical'), ('OFFLINE', 'Offline')], max_length=20)),
                ('response_time', models.DecimalField(blank=True, decimal_places=4, help_text='Response time in milliseconds', max_digits=8, null=True)),
                ('error_message', models.TextField(blank=True, help_text='Error details if any')),
                ('last_check', models.DateTimeField(auto_now_add=True)),
                ('next_check', models.DateTimeField(blank=True, help_text='When to check next', null=True)),
                ('metadata', models.JSONField(blank=True, help_text='Component-specific health data')),
            ],
            options={
                'ordering': ['component', '-last_check'],
                'indexes': [models.Index(fields=['component', 'status'], name='optimizatio_compone_dea6dc_idx'), models.Index(fields=['status', 'last_check'], name='optimizatio_status_10d4f6_idx')],
            },
        ),
        migrations.CreateModel(
            name='PerformanceMetric',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('metric_type', models.CharField(choices=[('RESPONSE_TIME', 'Response Time'), ('THROUGHPUT', 'Throughput'), ('ERROR_RATE', 'Error Rate'), ('MEMORY_USAGE', 'Memory Usage'), ('CPU_USAGE', 'CPU Usage'), ('DATABASE_QUERIES', 'Database Queries'), ('CACHE_HIT_RATE', 'Cache Hit Rate')], max_length=20)),
                ('value', models.DecimalField(decimal_places=4, max_digits=10)),
                ('unit', models.CharField(help_text='Unit of measurement', max_length=20)),
                ('endpoint', models.CharField(blank=True, help_text='API endpoint or view', max_length=200)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('metadata', models.JSONField(blank=True, help_text='Additional context')),
            ],
            options={
                'ordering': ['-timestamp'],
                'indexes': [models.Index(fields=['metric_type', 'timestamp'], name='optimizatio_metric__92ff86_idx'), models.Index(fields=['endpoint', 'timestamp'], name='optimizatio_endpoin_33c4bd_idx')],
            },
        ),
        migrations.CreateModel(
            name='OptimizationRecommendation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('recommendation_type', models.CharField(choices=[('DATABASE', 'Database Optimization'), ('CACHE', 'Cache Optimization'), ('API', 'API Optimization'), ('SECURITY', 'Security Enhancement'), ('PERFORMANCE', 'Performance Tuning'), ('SCALABILITY', 'Scalability Improvement')], max_length=20)),
                ('priority', models.CharField(choices=[('LOW', 'Low Priority'), ('MEDIUM', 'Medium Priority'), ('HIGH', 'High Priority'), ('CRITICAL', 'Critical Priority')], default='MEDIUM', max_length=20)),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('impact', models.TextField(help_text='Expected impact of the optimization')),
                ('implementation', models.TextField(help_text='How to implement the optimization')),
                ('estimated_effort', models.CharField(help_text='Estimated effort required', max_length=50)),
                ('is_implemented', models.BooleanField(default=False)),
                ('implemented_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='created_recommendations', to=settings.AUTH_USER_MODEL)),
                ('implemented_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['priority', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='DatabasePerformance',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('query_type', models.CharField(choices=[('SELECT', 'Select Query'), ('INSERT', 'Insert Query'), ('UPDATE', 'Update Query'), ('DELETE', 'Delete Query'), ('COMPLEX', 'Complex Query')], max_length=20)),
                ('execution_time', models.DecimalField(decimal_places=4, help_text='Query execution time in milliseconds', max_digits=8)),
                ('rows_affected', models.IntegerField(default=0, help_text='Number of rows affected')),
                ('table_name', models.CharField(blank=True, help_text='Main table involved', max_length=100)),
                ('query_hash', models.CharField(blank=True, help_text='Hash of the query for identification', max_length=64)),
                ('slow_query', models.BooleanField(default=False, help_text='Whether this is a slow query')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'ordering': ['-timestamp'],
                'indexes': [models.Index(fields=['query_type', 'timestamp'], name='optimizatio_query_t_d77627_idx'), models.Index(fields=['slow_query', 'timestamp'], name='optimizatio_slow_qu_f2f775_idx'), models.Index(fields=['table_name', 'timestamp'], name='optimizatio_table_n_e5980f_idx')],
            },
        ),
        migrations.CreateModel(
            name='CachePerformance',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cache_type', models.CharField(choices=[('REDIS', 'Redis Cache'), ('MEMORY', 'Memory Cache'), ('DATABASE', 'Database Cache'), ('CDN', 'CDN Cache')], max_length=20)),
                ('hit_count', models.BigIntegerField(default=0, help_text='Number of cache hits')),
                ('miss_count', models.BigIntegerField(default=0, help_text='Number of cache misses')),
                ('total_requests', models.BigIntegerField(default=0, help_text='Total cache requests')),
                ('hit_rate', models.DecimalField(decimal_places=2, help_text='Cache hit rate percentage', max_digits=5, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('average_response_time', models.DecimalField(decimal_places=4, help_text='Average cache response time in milliseconds', max_digits=8)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'ordering': ['-timestamp'],
                'indexes': [models.Index(fields=['cache_type', 'timestamp'], name='optimizatio_cache_t_fc8b58_idx')],
            },
        ),
        migrations.CreateModel(
            name='SecurityEvent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('event_type', models.CharField(choices=[('LOGIN', 'User Login'), ('LOGOUT', 'User Logout'), ('AUTH_FAILURE', 'Authentication Failure'), ('PERMISSION_DENIED', 'Permission Denied'), ('API_ACCESS', 'API Access'), ('DATA_ACCESS', 'Data Access'), ('CONFIG_CHANGE', 'Configuration Change'), ('SECURITY_ALERT', 'Security Alert')], max_length=20)),
                ('severity', models.CharField(choices=[('LOW', 'Low'), ('MEDIUM', 'Medium'), ('HIGH', 'High'), ('CRITICAL', 'Critical')], default='LOW', max_length=20)),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True)),
                ('user_agent', models.TextField(blank=True)),
                ('endpoint', models.CharField(blank=True, max_length=200)),
                ('description', models.TextField()),
                ('metadata', models.JSONField(blank=True, help_text='Additional event details')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-timestamp'],
                'indexes': [models.Index(fields=['event_type', 'timestamp'], name='optimizatio_event_t_faebf5_idx'), models.Index(fields=['severity', 'timestamp'], name='optimizatio_severit_839e13_idx'), models.Index(fields=['user', 'timestamp'], name='optimizatio_user_id_bd1718_idx')],
            },
        ),
        migrations.CreateModel(
            name='RateLimitLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('limit_type', models.CharField(choices=[('API_RATE_LIMIT', 'API Rate Limit'), ('USER_RATE_LIMIT', 'User Rate Limit'), ('IP_RATE_LIMIT', 'IP Rate Limit'), ('ENDPOINT_LIMIT', 'Endpoint Limit')], max_length=20)),
                ('ip_address', models.GenericIPAddressField()),
                ('endpoint', models.CharField(max_length=200)),
                ('request_count', models.IntegerField(default=1, help_text='Number of requests in the period')),
                ('limit_threshold', models.IntegerField(help_text='Rate limit threshold')),
                ('period_seconds', models.IntegerField(help_text='Time period in seconds')),
                ('blocked', models.BooleanField(default=False, help_text='Whether the request was blocked')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-timestamp'],
                'indexes': [models.Index(fields=['limit_type', 'timestamp'], name='optimizatio_limit_t_20ef8f_idx'), models.Index(fields=['ip_address', 'timestamp'], name='optimizatio_ip_addr_e6ed6f_idx'), models.Index(fields=['user', 'timestamp'], name='optimizatio_user_id_3ad999_idx')],
            },
        ),
    ]
